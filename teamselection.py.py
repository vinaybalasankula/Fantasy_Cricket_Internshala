# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'team.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from evalteam import Ui_widget
from teamname import Ui_Dialog
import sqlite3
db=sqlite3.connect('Fantasy_cricket_db.db')
cursor=db.cursor()


class Ui_MainWindow(object):
        def setupUi(self, MainWindow):
                MainWindow.setObjectName("MainWindow")
                MainWindow.resize(900, 700)
                MainWindow.setMinimumSize(QtCore.QSize(900, 700))
                MainWindow.setStyleSheet("QMenuBar::item{\n"
                "background-color:rgb(180,180,180);\n"
                "border:1px solid black;\n"
                "padding:4px 30px 3px 30px;\n"
                "}\n")
                
                self.centralwidget = QtWidgets.QWidget(MainWindow)
                self.centralwidget.setEnabled(False)
                self.centralwidget.setObjectName("centralwidget")
                self.centralwidget.setStyleSheet("background-color: rgb(255, 255, 255);")
                self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
                self.verticalLayout.setObjectName("verticalLayout")
                self.v1 = QtWidgets.QWidget(self.centralwidget)
                self.v1.setMinimumSize(QtCore.QSize(768, 0))
                self.v1.setStyleSheet("background-color: rgb(240, 240, 240);")
                self.v1.setObjectName("v1")
                self.vl1 = QtWidgets.QVBoxLayout(self.v1)
                self.vl1.setObjectName("vl1")
                self.Selections = QtWidgets.QLabel(self.v1)
                font = QtGui.QFont()
                font.setFamily("Comic Sans MS")
                font.setPointSize(10)
                self.Selections.setFont(font)
                self.Selections.setObjectName("Selections")
                self.vl1.addWidget(self.Selections)
                self.h1 = QtWidgets.QHBoxLayout()
                self.h1.setObjectName("h1")
                self.AvailableBatsman = QtWidgets.QLabel(self.v1)
                font = QtGui.QFont()
                font.setFamily("Comic Sans MS")
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.AvailableBatsman.setFont(font)
                self.AvailableBatsman.setObjectName("AvailableBatsman")
                self.h1.addWidget(self.AvailableBatsman)
                self.NOfBatsmanUsed = QtWidgets.QLabel(self.v1)
                font = QtGui.QFont()
                font.setFamily("Comic Sans MS")
                font.setPointSize(10)
                font.setBold(False)
                font.setItalic(False)
                font.setWeight(50)
                self.NOfBatsmanUsed.setFont(font)
                self.NOfBatsmanUsed.setStyleSheet("color: rgb(72,160,170);\n""font: 10pt \"Comic Sans MS\";\n""")
                self.NOfBatsmanUsed.setObjectName("NOfBatsmanUsed")
                self.h1.addWidget(self.NOfBatsmanUsed)
                spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
                self.h1.addItem(spacerItem)
                self.AvailableBowlers = QtWidgets.QLabel(self.v1)
                font = QtGui.QFont()
                font.setFamily("Comic Sans MS")
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.AvailableBowlers.setFont(font)
                self.AvailableBowlers.setObjectName("AvailableBowlers")
                self.h1.addWidget(self.AvailableBowlers)
                self.NOfBowlersUsed = QtWidgets.QLabel(self.v1)
                font = QtGui.QFont()
                font.setFamily("Comic Sans MS")
                font.setPointSize(10)
                font.setBold(False)
                font.setItalic(False)
                font.setWeight(9)
                self.NOfBowlersUsed.setFont(font)
                self.NOfBowlersUsed.setStyleSheet("color: rgb(72,160,170);\n"
        "font: 75 10pt \"Comic Sans MS\";")
                self.NOfBowlersUsed.setObjectName("NOfBowlersUsed")
                self.h1.addWidget(self.NOfBowlersUsed)
                spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
                self.h1.addItem(spacerItem1)
                self.AvailableAllRounders = QtWidgets.QLabel(self.v1)
                font = QtGui.QFont()
                font.setFamily("Comic Sans MS")
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.AvailableAllRounders.setFont(font)
                self.AvailableAllRounders.setObjectName("AvailableAllRounders")
                self.h1.addWidget(self.AvailableAllRounders)
                self.NOfARUsed = QtWidgets.QLabel(self.v1)
                font = QtGui.QFont()
                font.setFamily("Comic Sans MS")
                font.setPointSize(10)
                font.setBold(False)
                font.setItalic(False)
                font.setWeight(9)
                self.NOfARUsed.setFont(font)
                self.NOfARUsed.setStyleSheet("color: rgb(72,160,170);\n"
        "font: 75 10pt \"Comic Sans MS\";")
                self.NOfARUsed.setObjectName("NOfARUsed")
                self.h1.addWidget(self.NOfARUsed)
                spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
                self.h1.addItem(spacerItem2)
                self.AvailableWK = QtWidgets.QLabel(self.v1)
                font = QtGui.QFont()
                font.setFamily("Comic Sans MS")
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.AvailableWK.setFont(font)
                self.AvailableWK.setObjectName("AvailableWK")
                self.h1.addWidget(self.AvailableWK)
                self.NOfWKUsed = QtWidgets.QLabel(self.v1)
                self.NOfWKUsed.setStyleSheet("color: rgb(72,160,170);\n"
        "font: 75 10pt \"Comic Sans MS\";")
                self.NOfWKUsed.setObjectName("NOfWKUsed")
                self.h1.addWidget(self.NOfWKUsed)
                spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
                self.h1.addItem(spacerItem3)
                self.vl1.addLayout(self.h1)
                self.verticalLayout.addWidget(self.v1)
                self.v2 = QtWidgets.QVBoxLayout()
                self.v2.setObjectName("v2")
                self.h2 = QtWidgets.QHBoxLayout()
                self.h2.setObjectName("h2")
                spacerItem4 = QtWidgets.QSpacerItem(39, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
                self.h2.addItem(spacerItem4)
                self.PointsAvailable = QtWidgets.QLabel(self.centralwidget)
                font = QtGui.QFont()
                font.setFamily("Comic Sans MS")
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.PointsAvailable.setFont(font)
                self.PointsAvailable.setObjectName("PointsAvailable")
                self.h2.addWidget(self.PointsAvailable)
                spacerItem5 = QtWidgets.QSpacerItem(1, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
                self.h2.addItem(spacerItem5)
                self.NOfPoints = QtWidgets.QLabel(self.centralwidget)
                self.NOfPoints.setStyleSheet("color: rgb(72,160,170);\n")
                self.NOfPoints.setObjectName("NOfPoints")
                font = QtGui.QFont()
                font.setFamily("Comic Sans MS")
                font.setPointSize(10)
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                self.NOfPoints.setFont(font)
                self.h2.addWidget(self.NOfPoints)
                spacerItem6 = QtWidgets.QSpacerItem(200, 10, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
                self.h2.addItem(spacerItem6)
                self.PointsUsed = QtWidgets.QLabel(self.centralwidget)
                font = QtGui.QFont()
                font.setFamily("Comic Sans MS")
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.PointsUsed.setFont(font)
                self.PointsUsed.setObjectName("PointsUsed")
                self.h2.addWidget(self.PointsUsed)
                self.NOfPointsUsed = QtWidgets.QLabel(self.centralwidget)
                self.NOfPointsUsed.setStyleSheet("color: rgb(72,160,170);\n")
                self.NOfPointsUsed.setObjectName("NOfPointsUsed")
                font = QtGui.QFont()
                font.setFamily("Comic Sans MS")
                font.setPointSize(10)
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                self.NOfPointsUsed.setFont(font)
                self.h2.addWidget(self.NOfPointsUsed)
                spacerItem7 = QtWidgets.QSpacerItem(15, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
                self.h2.addItem(spacerItem7)
                spacerItem8 = QtWidgets.QSpacerItem(170, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
                self.h2.addItem(spacerItem8)
                self.v2.addLayout(self.h2)
                self.h3 = QtWidgets.QHBoxLayout()
                self.h3.setObjectName("h3")
                spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
                self.h3.addItem(spacerItem9)
                self.AvailablePlayers = QtWidgets.QListWidget(self.centralwidget)
                self.AvailablePlayers.setStyleSheet("font: 10pt \"Comic Sans MS\";")
                self.AvailablePlayers.setObjectName("AvailablePlayers")
                self.z1=QtWidgets.QHBoxLayout()
                self.batbtn=QtWidgets.QRadioButton()
                self.bowlbtn=QtWidgets.QRadioButton()
                self.arbtn=QtWidgets.QRadioButton()
                self.wkbtn=QtWidgets.QRadioButton()
                self.batbtn.setText("BAT")
                self.bowlbtn.setText("BOWL")
                self.arbtn.setText("AR")
                self.wkbtn.setText("WK")
                self.z1.addWidget(self.batbtn)
                self.z1.addWidget(self.bowlbtn)
                self.z1.addWidget(self.arbtn)
                self.z1.addWidget(self.wkbtn)
                wid =QtWidgets.QWidget()
                wid.setLayout(self.z1)
                item=QtWidgets.QListWidgetItem()
                self.AvailablePlayers.addItem(item)
                item.setSizeHint(wid.minimumSizeHint())
                self.AvailablePlayers.setItemWidget(item,wid)
                self.AvailablePlayers.setCurrentRow(2)
                self.h3.addWidget(self.AvailablePlayers)
                spacerItem10 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
                self.h3.addItem(spacerItem10)
                self.label = QtWidgets.QLabel(self.centralwidget)
                font = QtGui.QFont()
                font.setFamily("Comic Sans MS")
                font.setPointSize(10)
                font.setBold(True)
                font.setWeight(75)
                self.label.setFont(font)
                self.label.setObjectName("label")
                self.h3.addWidget(self.label)
                spacerItem11 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
                self.h3.addItem(spacerItem11)
                self.TeamPlayers = QtWidgets.QListWidget(self.centralwidget)
                self.TeamPlayers.setStyleSheet("font: 10pt \"Comic Sans MS\";")
                self.TeamPlayers.setObjectName("TeamPlayers")
                self.z2=QtWidgets.QHBoxLayout()
                self.name=QtWidgets.QLabel()
                self.nameofteam=QtWidgets.QLabel()
                self.name.setText("      TeamName")
                self.nameofteam.setText("Displayed Here")
                self.nameofteam.setStyleSheet("color: rgb(72,160,170);\n")
                font = QtGui.QFont()
                font.setFamily("Comic Sans MS")
                font.setPointSize(10)
                font.setBold(True)
                font.setItalic(False)
                font.setWeight(75)
                self.nameofteam.setFont(font)
                self.z2.addWidget(self.name)
                self.z2.addWidget(self.nameofteam)
                wid1 =QtWidgets.QWidget()
                wid1.setLayout(self.z2)
                item1=QtWidgets.QListWidgetItem()
                self.TeamPlayers.addItem(item1)
                item1.setSizeHint(wid1.minimumSizeHint())
                self.TeamPlayers.setItemWidget(item1,wid1)
                self.TeamPlayers.setCurrentRow(2)
                self.h3.addWidget(self.TeamPlayers)
                spacerItem12 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
                self.h3.addItem(spacerItem12)
                self.v2.addLayout(self.h3)
                self.verticalLayout.addLayout(self.v2)
                MainWindow.setCentralWidget(self.centralwidget)
                self.menubar = QtWidgets.QMenuBar(MainWindow)
                self.menubar.setGeometry(QtCore.QRect(0, 0, 848, 25))
                font = QtGui.QFont()
                font.setFamily("Comic Sans MS")
                font.setPointSize(10)
                self.menubar.setFont(font)
                self.menubar.setStyleSheet("")
                self.menubar.setObjectName("menubar")
                self.ManageTeams = QtWidgets.QMenu(self.menubar)
                #self.ManageTeams.setStyleSheet("background-color:rgb(204,204,204);border:1px solid black;")
                self.menuopenteam = QtWidgets.QMenu(self.ManageTeams)
                font = QtGui.QFont()
                font.setFamily("Comic Sans MS")
                font.setPointSize(10)
                font.setBold(False)
                font.setItalic(False)
                font.setWeight(50)
                self.ManageTeams.setFont(font)
                self.ManageTeams.setLayoutDirection(QtCore.Qt.LeftToRight)
                self.ManageTeams.setStyleSheet("font: 10pt \"Comic Sans MS\";\n"
        "background-color: rgb(200, 200, 200);\n"
        "selection-background-color: rgb(0,150, 255);border:2px solid black;")
                self.ManageTeams.setObjectName("ManageTeams")
                MainWindow.setMenuBar(self.menubar)
                self.statusbar = QtWidgets.QStatusBar(MainWindow)
                self.statusbar.setObjectName("statusbar")
                MainWindow.setStatusBar(self.statusbar)
                self.EVALUATETeam = QtWidgets.QAction(MainWindow)
                self.EVALUATETeam.setObjectName("EVALUATETeam")
                self.NEWTeam = QtWidgets.QAction(MainWindow)
                self.NEWTeam.setObjectName("NEWTeam")
                self.SAVETeam = QtWidgets.QAction(MainWindow)
                self.SAVETeam.setObjectName("SAVETeam")
                self.ManageTeams.addAction(self.NEWTeam)
                self.ManageTeams.addAction(self.menuopenteam.menuAction())
                self.ManageTeams.addAction(self.SAVETeam)
                self.ManageTeams.addAction(self.EVALUATETeam)
                self.ManageTeams.addSeparator()
                self.menubar.addAction(self.ManageTeams.menuAction())
                self.NEWTeam.triggered.connect(self.newteam1)
                self.EVALUATETeam.triggered.connect(self.eval)
                self.SAVETeam.triggered.connect(self.savetm)
                self.retranslateUi(MainWindow)
                self.data()
                cursor.execute("SELECT DISTINCT team_name FROM teams;")
                fetch_teams = cursor.fetchall()
                if fetch_teams is not None:
                        self.teamslist = self.listmaking(fetch_teams)
                self.openTeam()
                self.batbtn.clicked.connect(self.bat)
                self.bowlbtn.clicked.connect(self.bowl)
                self.arbtn.clicked.connect(self.ar)
                self.wkbtn.clicked.connect(self.wk)
                self.AvailablePlayers.itemDoubleClicked.connect(self.removelist1)
                self.TeamPlayers.itemDoubleClicked.connect(self.removelist2)
                QtCore.QMetaObject.connectSlotsByName(MainWindow)
        

        def newteam1(self):
                self.clear(self.AvailablePlayers)
                Dialog = QtWidgets.QDialog()
                ui = Ui_Dialog()
                ui.setupUi(Dialog)
                Dialog.show()
                v=Dialog.exec_()
                cursor.execute("select team_name from teams where team_name = ?;",(ui.TEAMNAME.text(),))
                team=cursor.fetchone()
                if v==Dialog.Accepted:
                        user=ui.TEAMNAME.text()
                        if len(user)<2:
                                
                                self.displayerror("Please enter team name with atleast 2 characters")
                                
                        else:
                                if team is None:
                                        self.centralwidget.setEnabled(True)
                                        self.nameofteam.setText(user)
                                        self.NOfBatsmanUsed.setText("00")
                                        self.NOfBowlersUsed.setText("00")
                                        self.NOfARUsed.setText("00")
                                        self.NOfWKUsed.setText("00")
                                        self.NOfPoints.setText("1000")
                                        self.NOfPointsUsed.setText("0000")
                                        self.clear(self.AvailablePlayers)
                                        self.clear(self.TeamPlayers)
                                        self.data()
                                
                                else:
                                        self.displayerror("Name of the team is already exist")

        def eval(self):
               
                self.widget = QtWidgets.QWidget()
                self.ui = Ui_widget()
                self.ui.setupUi(self.widget)
                self.widget.show()
        
        def data(self):
                
                sql="select player from stats;"
                cursor.execute(sql)
                rec=list(map(''.join,cursor.fetchall()))
                self.batsmenlist=list()
                self.bowlerlist=list()
                self.arlist=list()
                self.wklist=list()
                self.selectedplayerslist=list()
                self.teamlist=list()
                 
                for i in rec:
                        cursor.execute('select category from stats where player=?',(i ,))
                        cat=cursor.fetchone()
                        v=''.join(cat)
                        if v=='BAT':
                                self.batsmenlist.append(i)
                                self.batsmenlist.sort()
                        elif v=='BOWL':
                                self.bowlerlist.append(i)
                                self.bowlerlist.sort()
                        elif v=='AR':
                                self.arlist.append(i)
                                self.arlist.sort()
                        else:
                                self.wklist.append(i)
                                self.wklist.sort()

        def bat(self):
                self.clear(self.AvailablePlayers)
                for i in self.batsmenlist:
                        self.colour(i)
                        self.AvailablePlayers.addItem(self.items)
        def bowl(self):
                self.clear(self.AvailablePlayers)
                for i in self.bowlerlist:
                        self.colour(i)
                        self.AvailablePlayers.addItem(self.items)
        def ar(self):
                self.clear(self.AvailablePlayers)
                for i in self.arlist:
                        self.colour(i)
                        self.AvailablePlayers.addItem(self.items)
        def wk(self):
                self.clear(self.AvailablePlayers)
                for i in self.wklist:
                        self.colour(i)
                        self.AvailablePlayers.addItem(self.items)
        def colour(self,playerstr):
                self.items=QtWidgets.QListWidgetItem('      '+playerstr)
                self.items.setForeground(QtGui.QColor(0,155,255))
        def clear(self,listwidget):
                le=listwidget.count()
                while le>0:
                        listwidget.takeItem(1)
                        le=le-1
        def getval(self,name):
                cursor.execute('select value from stats where player=?',(name,))
                return int(''.join(map(str,cursor.fetchone())))
                
                
        def removelist1(self,item):
                player=item.text().strip()
                try:
                        value=self.getval(player)
                        cursor.execute('select category from stats where player=?',(player,))
                        cat=''.join(cursor.fetchone())
                except:
                        pass
                else:
                        self.PointsAvailable1=int(self.NOfPoints.text())
                        if self.PointsAvailable1>= value:
                                if int(self.NOfBatsmanUsed.text())+int(self.NOfBowlersUsed.text())+int(self.NOfARUsed.text())==10 and int(self.NOfWKUsed.text())==0 and cat !='WK':
                                        self.displayerror("one wicketkepper must")
                                else:
                                        if cat=='BAT':
                                                self.batsmenlist.remove(player)
                                                self.NOfBatsmanUsed.setText("0"+str(int(self.NOfBatsmanUsed.text())+1))
                                                self.playerselection(player)
                                        elif cat=='BOWL':
                                                self.bowlerlist.remove(player)
                                                self.NOfBowlersUsed.setText("0"+str(int(self.NOfBowlersUsed.text())+1))
                                                self.playerselection(player)
                                
                                        elif cat=='AR':
                                                self.arlist.remove(player)
                                                self.NOfARUsed.setText("0"+str(int(self.NOfARUsed.text())+1))
                                                self.playerselection(player)
                                                                
                                        elif cat=='WK':
                                                if int(self.NOfWKUsed.text()) != 0:
                                                        self.displayerror("your cannt  take more than one wicketkeepr")
                                                        return
                                                self.wklist.remove(player)
                                                self.NOfWKUsed.setText("0"+str(int(self.NOfWKUsed.text())+1))
                                                self.playerselection(player)
                                        nopiontsused=str(int(self.NOfPointsUsed.text())+value)
                                        piontavail=str(int(self.NOfPoints.text())-value)
                                        self.NOfPoints.setText(piontavail)
                                        self.NOfPointsUsed.setText(nopiontsused)
                                        self.colour(player)
                                        self.AvailablePlayers.takeItem(self.AvailablePlayers.row(item))
                                        self.TeamPlayers.addItem(self.items)
                        else:
                                if (int(self.NOfPointsUsed.text()))>1000:
                                        self.displayerror("you cannot take more than 11players")
                                else:
                                        self.displayerror('insufficient points ')
                                        
        def removelist2(self, item):
                player=item.text().strip()
                try:

                        value=self.getval(player)
                        cursor.execute('select category from stats where player=?',(player,))
                        cat=''.join(cursor.fetchone())
                except:
                        pass
                else:
                        if cat=='BAT':
                                self.batbtn.setChecked(True)
                                self.batsmenlist.append(player)
                                self.NOfBatsmanUsed.setText("0"+str(int(self.NOfBatsmanUsed.text())-1))
                                self.bat()
                                self.playerrejected(player)
                        elif cat=='BOWL':
                                self.bowlbtn.setChecked(True)
                                self.bowlerlist.append(player)
                                self.NOfBowlersUsed.setText("0"+str(int(self.NOfBowlersUsed.text())-1))
                                self.bowl()
                                self.playerrejected(player)
                        elif cat=='AR':
                                self.arbtn.setChecked(True)
                                self.arlist.append(player)
                                self.NOfARUsed.setText("0"+str(int(self.NOfARUsed.text())-1))
                                self.ar()
                                self.playerrejected(player)
                        elif cat=='WK':
                                self.wkbtn.setChecked(True)
                                self.wklist.append(player)
                                self.NOfWKUsed.setText("0"+str(int(self.NOfWKUsed.text())-1))
                                self.wk()
                                self.playerrejected(player)
                        nopiontsused=str(int(self.NOfPointsUsed.text())-value)
                        piontavail=str(int(self.NOfPoints.text())+value)
                        self.NOfPoints.setText(piontavail)
                        self.NOfPointsUsed.setText(nopiontsused)
                        self.TeamPlayers.takeItem(self.TeamPlayers.row(item))
                        self.AvailablePlayers.addItem(self.items)
        def displayerror(self,str):
                errormessage=QtWidgets.QMessageBox()
                errormessage.setText(str)
                errormessage.setIcon(errormessage.Critical)
                errormessage.exec_()
        def playerselection(self,name):
                self.selectedplayerslist.append(name)
                
        def playerrejected(self,name):
                self.selectedplayerslist.remove(name)
        def savetm(self):
                if len(self.selectedplayerslist) != 11:
                        self.displayerror("take more player")
                else:
                        self.teamname1=self.nameofteam.text()
                        self.selectedplayerslist.sort()
                        for player in self.selectedplayerslist:
                                value=self.getval(player)
                                cursor.execute('insert into teams(team_name,player,value) values(?,?,?);',(self.teamname1,player,value,))
                        db.commit()
                        msg = QtWidgets.QMessageBox()
                        msg.setIcon(msg.Information)
                        msg.setText("Team saved successfully")
                        msg.exec_()
                        self.teamslist.clear()
                                
        def openTeam(self):
                for team in self.teamslist:
                        self.actionOpen_Team = QtWidgets.QAction(self.menuopenteam)
                        self.actionOpen_Team.setObjectName("action"+team)
                        self.actionOpen_Team.setText(team)
                        self.menuopenteam.addAction(self.actionOpen_Team)
                self.menuopenteam.triggered[QtWidgets.QAction].connect(self.open)               

        def open(self,action):
                self.action =  action
                self.centralwidget.setEnabled(True)
                self.clear(self.AvailablePlayers)
                self.clear(self.TeamPlayers)
                self.data()
                self.nameofteam.setText(action.text())
                cursor.execute("SELECT player FROM teams WHERE team_name = ?",(action.text(),))
                players = self.listmaking(cursor.fetchall())
                nopiontsused = 0
                for player in players:
                        value = self.getval(player)
                        nopiontsused += value
                        cursor.execute("SELECT category FROM stats INNER JOIN teams WHERE stats.player = teams.player AND teams.player = ?",(player,))
                        ctg = "".join(cursor.fetchone())
                        if ctg == "BAT":
                                self.batsmenlist.remove(player)
                        elif ctg == "BOWL":
                                self.bowlerlist.remove(player)
                        elif ctg == "AR":
                                self.arlist.remove(player)
                        elif ctg == "WK":
                                self.wklist.remove(player)
                        self.playerselection(player)
                        self.colour("       "+player)
                        self.TeamPlayers.addItem(self.items)
                        cursor.execute("SELECT category FROM stats INNER JOIN teams WHERE stats.player = teams.player AND teams.team_name = ?",(action.text(),))
                        ctg = self.listmaking(cursor.fetchall())
                        self.NOfBatsmanUsed.setText(str(ctg.count("BAT")))
                        self.NOfBowlersUsed.setText(str(ctg.count("BOWL")))
                        self.NOfARUsed.setText(str(ctg.count("AR")))
                        self.NOfWKUsed.setText(str(ctg.count("WK")))
                        self.NOfPointsUsed.setText(str(nopiontsused))
                        self.NOfPoints.setText(str(1000-int(self.NOfPointsUsed.text())))

        def listmaking(self,tuple):
                return list(map("".join,tuple))


        def retranslateUi(self, MainWindow):
                _translate = QtCore.QCoreApplication.translate
                MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
                self.Selections.setText(_translate("MainWindow", "Your Selections"))
                self.AvailableBatsman.setText(_translate("MainWindow", "Batsman(BAT)"))
                self.NOfBatsmanUsed.setText(_translate("MainWindow", "##"))
                self.AvailableBowlers.setText(_translate("MainWindow", "Bowlers(BOW)"))
                self.NOfBowlersUsed.setText(_translate("MainWindow", "##"))
                self.AvailableAllRounders.setText(_translate("MainWindow", "Allrounders(AR)"))
                self.NOfARUsed.setText(_translate("MainWindow", "##"))
                self.AvailableWK.setText(_translate("MainWindow", "Wicket-keeper(WK)"))
                self.NOfWKUsed.setText(_translate("MainWindow", "##"))
                self.PointsAvailable.setText(_translate("MainWindow", "Points Available"))
                self.NOfPoints.setText(_translate("MainWindow", "####"))
                self.PointsUsed.setText(_translate("MainWindow", "Points Used"))
                self.NOfPointsUsed.setText(_translate("MainWindow", "####"))
                self.label.setText(_translate("MainWindow", ">"))
                self.ManageTeams.setTitle(_translate("MainWindow", "Manage Teams"))
                self.menuopenteam.setTitle(_translate("MainWindow", "OPEN Team "))
                self.EVALUATETeam.setText(_translate("MainWindow", "EVALUATE Team"))
                self.NEWTeam.setText(_translate("MainWindow", "NEW Team"))
                self.SAVETeam.setText(_translate("MainWindow", "SAVE Team"))


if __name__ == "__main__":
        import sys
        app = QtWidgets.QApplication(sys.argv)
        MainWindow = QtWidgets.QMainWindow()
        ui = Ui_MainWindow()
        ui.setupUi(MainWindow)
        MainWindow.show()
        sys.exit(app.exec_())